you might wanna look into the transformation-matrix library
here's the GPT response:

To fit a div within any four arbitrary 2D coordinates, including skewing to match the perspective, you can use the CSS matrix() function with the transform property. However, calculating the matrix directly can be complex, and you might want to use a library like transformation-matrix to simplify the process.

Here's an example using the transformation-matrix library:

<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <script src="https://unpkg.com/transformation-matrix/dist/transformation-matrix.js"></script>
  <style>
    .transformed-div {
      width: 100px;
      height: 50px;
      background-color: #3498db;
      position: absolute;
    }
  </style>
</head>
<body>

<div class="transformed-div"></div>

<script>
  const coordinates = [
    { x: 100, y: 100 },
    { x: 200, y: 100 },
    { x: 200, y: 200 },
    { x: 100, y: 200 }
  ];

  const div = document.querySelector('.transformed-div');

  // Calculate the matrix to transform the div to fit within the coordinates
  const matrix = matrixForQuadrilateral(
    coordinates[0].x, coordinates[0].y,
    coordinates[1].x, coordinates[1].y,
    coordinates[2].x, coordinates[2].y,
    coordinates[3].x, coordinates[3].y,
    0, 0,
    div.clientWidth, 0,
    div.clientWidth, div.clientHeight,
    0, div.clientHeight
  );

  // Apply the matrix to the div
  div.style.transform = `matrix(${matrix.join(', ')})`;
</script>

</body>
</html>

In this example, the matrixForQuadrilateral function from the transformation-matrix library is used to calculate the transformation matrix needed to fit the div within the specified coordinates. The transform property is then set using the calculated matrix.

This example assumes that you've included the transformation-matrix library in your project. You can include it from a CDN or install it using npm/yarn if you are using a build tool.




THERE'S NO SUCH THING, HOWEVER:
	https://codepen.io/desandro/pen/PepLOz
	-first vector in the vertex chooses the direction
	-first rectangle built upon the first vectex is the base of the texture?
	-wouldn't work, rectangles actually get built upon an unpredictable first vertex
	-the unpredictability is given by the clockwise or counterclockwise rotation i used not to care about
	-just see how it works